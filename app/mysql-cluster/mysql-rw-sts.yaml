apiVersion: apps/v1
kind: StatefulSet
metadata:
  namespace: mysql-cluster
  name: mysql-rw-sts
spec:
  selector:
    matchLabels:
      app: mysql-rw-sts
  serviceName: mysql-rw-svc
  replicas: 3

  volumeClaimTemplates:
  - metadata:
      name: persistent
    spec:
      storageClassName: hm77-nfs-client
      accessModes:
        - ReadWriteMany
      resources:
        requests:
          storage: 30Gi

  template:
    metadata:
      labels:
        app: mysql-rw-sts
    spec:
      volumes:
      - name: conf
        emptyDir: {}
      - name: config-map
        configMap:
          name: mysql-rw-cm
      
      initContainers:
      - name: init-mysql
        image: mysql:8.0.18
        command:
        - bash
        - "-c"
        - |
          set -ex
          # 基于 Pod 序号生成 MySQL 服务器的 ID。
          [[ $HOSTNAME =~ -([0-9]+)$ ]] || exit 1
          ordinal=${BASH_REMATCH[1]}
          echo [mysqld] > /mnt/conf.d/server-id.cnf
          # 添加偏移量以避免使用 server-id=0 这一保留值。
          echo server-id=$((100 + $ordinal)) >> /mnt/conf.d/server-id.cnf
          # 将合适的 conf.d 文件从 config-map 复制到 emptyDir。
          if [[ $ordinal -eq 0 ]]; then
            cp /mnt/config-map/primary.cnf /mnt/conf.d/
          else
            cp /mnt/config-map/replica.cnf /mnt/conf.d/
          fi          
        volumeMounts:
        - name: conf
          mountPath: /mnt/conf.d
        - name: config-map
          mountPath: /mnt/config-map
      - name: clone-mysql
        image: mzmuer/xtrabackup:1.0
        command:
        - bash
        - "-c"
        - |
          set -ex
          # 如果已有数据，则跳过克隆。
          [[ -d /var/lib/mysql/mysql ]] && exit 0
          # 跳过主实例（序号索引 0）的克隆。
          [[ `hostname` =~ -([0-9]+)$ ]] || exit 1
          ordinal=${BASH_REMATCH[1]}
          [[ $ordinal -eq 0 ]] && exit 0
          # 从主节点克隆数据。
          ncat --recv-only mysql-rw-sts-0.mysql-rw-svc.mysql-cluster 3307 | xbstream -x -C /var/lib/mysql
          # 准备备份。
          xtrabackup --prepare --target-dir=/var/lib/mysql          
        volumeMounts:
        - name: persistent
          mountPath: /var/lib/mysql
          subPath: mysql
        - name: conf
          mountPath: /etc/mysql/conf.d

      containers:
      - name: mysql
        image: mysql:8.0.18
        args: ["--default-authentication-plugin=mysql_native_password"]
        env:
        - name: MYSQL_ROOT_PASSWORD
          value: "rootpasswd"
        ports:
        - name: mysql
          containerPort: 3306
        volumeMounts:
        - name: persistent
          mountPath: /var/lib/mysql
          subPath: mysql
        - name: conf
          mountPath: /etc/mysql/conf.d
        # resources:
        #   requests:
        #     cpu: 500m
        #     memory: 1Gi
        # livenessProbe:
        #   exec:
        #     command: ["mysqladmin", "ping"]
        #   initialDelaySeconds: 30
        #   periodSeconds: 10
        #   timeoutSeconds: 5
        # readinessProbe:
        #   exec:
        #     # 检查我们是否可以通过 TCP 执行查询（skip-networking 是关闭的）。
        #     command: ["mysql", "-h", "127.0.0.1", "-e", "SELECT 1"]
        #   initialDelaySeconds: 5
        #   periodSeconds: 2
        #   timeoutSeconds: 1
      - name: xtrabackup
        image: mzmuer/xtrabackup:1.0
        ports:
        - name: xtrabackup
          containerPort: 3307
        command:
        - bash
        - "-c"
        - |
          set -ex
          cd /var/lib/mysql

          if [[ -f xtrabackup_binlog_info ]]; then
            # We're cloning directly from master.
            echo "CHANGE MASTER TO MASTER_AUTO_POSITION=1" > change_master_to.sql.in
            rm -f xtrabackup_binlog_info
          fi

          # Check if we need to complete a clone by starting replication.
          if [[ -f change_master_to.sql.in ]]; then
            echo "Waiting for mysqld to be ready (accepting connections)"
            until mysql -h 127.0.0.1 -prootpasswd -e "SELECT 1"; do sleep 1; done

            echo "Initializing replication from clone position"
            # In case of container restart, attempt this at-most-once.
            mv change_master_to.sql.in change_master_to.sql.orig
            mysql -h 127.0.0.1 -prootpasswd <<EOF
          $(<change_master_to.sql.orig),
            MASTER_HOST='mysql-rw-sts-0.mysql-rw-svc.mysql-cluster',
            MASTER_USER='root',
            MASTER_PASSWORD='rootpasswd',
            MASTER_CONNECT_RETRY=10;
          START SLAVE;
          EOF
          else
            # 主节点，启动服务器发送备份。
            exec ncat --listen --keep-open --send-only --max-conns=1 3307 -c \
            "xtrabackup --backup --slave-info --stream=xbstream --host=127.0.0.1 --user=root --password=rootpasswd"          
          fi
        volumeMounts:
        - name: persistent
          mountPath: /var/lib/mysql
          subPath: mysql
        - name: conf
          mountPath: /etc/mysql/conf.d
        # resources:
        #   requests:
        #     cpu: 100m
        #     memory: 100Mi
