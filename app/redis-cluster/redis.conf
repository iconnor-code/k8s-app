############################## 基本配置 ##############################################
bind 0.0.0.0
port 6379
# 启动集群
cluster-enabled yes       
# 节点信息，自动生成
cluster-config-file nodes.conf 
# 超时时间
cluster-node-timeout 5000 
# 访问密码
requirepass "123456" 
# 主机密码
masterauth "123"

# 数据目录，数据库的写入会在这个目录。rdb、aof文件也会写在这个目录
dir /data

######################################## AOF持久化 ##################################
appendonly yes

appendfilename "appendonly.aof"

#aof持久化策略的配置
# no: 表示不执行fsync，由操作系统保证数据同步到磁盘，速度最快。
# always: 表示每次写入都执行fsync，以保证数据同步到磁盘。
# everysec: 表示每秒执行一次fsync，可能会导致丢失这1s数据。
appendfsync everysec

# 在aof重写或者写入rdb文件的时候，会执行大量IO，此时对于everysec和always的aof模式来说，执行fsync会造成阻塞过长时间
# 如果对延迟要求很高的应用，这个字段可以设置为yes，否则还是设置为no，这样对持久化特性来说这是更安全的选择。
# yes: 表示rewrite期间对新写操作不fsync,暂时存在内存中,等rewrite完成后再写入。Linux的默认fsync策略是30秒。可能丢失30秒数据。
no-appendfsync-on-rewrite yes

#aof自动重写配置。当目前aof文件大小超过上一次重写的aof文件大小的百分之多少进行重写,当前AOF文件大小是上次日志重写得到AOF文件大小的二倍（设置为100）时，自动启动新的日志重写过程。
auto-aof-rewrite-percentage 100

#设置允许重写的最小aof文件大小，避免了达到约定百分比但尺寸仍然很小的情况还要重写
auto-aof-rewrite-min-size 64mb

#aof文件可能在尾部是不完整的，当redis启动的时候，aof文件的数据被载入内存。重启可能发生在redis所在的主机操作系统宕机后，尤其在ext4文件系统没有加上data=ordered选项（redis宕机或者异常终止不会造成尾部不完整现象。）出现这种现象，可以选择让redis退出，或者导入尽可能多的数据。如果选择的是yes，当截断的aof文件被导入的时候，会自动发布一个log给客户端然后load。如果是no，用户必须手动redis-check-aof修复AOF文件才可以。
aof-load-truncated yes


########################################### RDB持久化 #######################################
# 服务器在900秒内，对数据库进行了至少一次修改
save 900 1
# 服务器在300秒内，对数据库进行了至少10次修改
save 300 10
# 服务器在60秒内，对数据库进行了至少10000次修改
save 60 10000 

# 当RDB持久化出现错误后，是否依然进行继续进行工作，yes：不能进行工作，no：可以继续进行工作，可以通过info中的rdb_last_bgsave_status了解RDB持久化是否有错误
stop-writes-on-bgsave-error yes    

# 使用压缩rdb文件，rdb文件压缩使用LZF压缩算法，yes：压缩，但是需要一些cpu的消耗。no：不压缩，需要更多的磁盘空间
rdbcompression yes

# 是否校验rdb文件。从rdb格式的第五个版本开始，在rdb文件的末尾会带上CRC64的校验和。这跟有利于文件的容错性，但是在保存rdb文件的时候，会有大概10%的性能损耗，所以如果你追求高性能，可以关闭该配置。
rdbchecksum yes

# rdb文件的名称
dbfilename "dump.rdb"

